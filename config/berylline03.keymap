#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

/* Layers */

#define DEF 0
#define NAV 1
#define SYM 2
#define NUM 3

/* Shortcuts */

#define CUT LC(X)
#define COPY LC(C)
#define PASTE LC(V)
#define UNDO LC(Z)
#define ALL LC(A)
#define TOP LC(HOME)
#define BTM LC(END)

/* Behavior Settings */

&sk {
    release-after-ms = <250>;
    quick-release;
};

&sl { release-after-ms = <250>; };

/ {
    behaviors {
        home: home_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp HOME>, <&kp HOME>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        end: end_ignoring_ctrl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp END>, <&kp END>;

            mods = <(MOD_LCTL|MOD_RCTL)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    combos {
        compatible = "zmk,combos";

        /*                KEY POSITIONS

             0   1   2   3   4      5   6   7   8   9
            10  11  12  13  14     15  16  17  18  19
                20  21  22             23  24  25
                        26  27     28  29              */
        /* Letters */

        v {
            key-positions = <1 2>;
            bindings = <&kp V>;
            layers = <0>;
        };

        q {
            key-positions = <2 3>;
            bindings = <&kp Q>;
            layers = <0>;
        };

        z {
            key-positions = <20 21>;
            bindings = <&kp Z>;
            layers = <0>;
        };

        /* Brackets */

        lbkt {
            key-positions = <1 11>;
            bindings = <&kp LBKT>;
            layers = <0 2 3>;
        };

        rbkt {
            key-positions = <8 18>;
            bindings = <&kp RBKT>;
            layers = <0 2 3>;
        };

        lpar {
            key-positions = <2 12>;
            bindings = <&kp LPAR>;
            layers = <0 2 3>;
        };

        rpar {
            key-positions = <7 17>;
            bindings = <&kp RPAR>;
            layers = <0 2 3>;
        };

        lbrc {
            key-positions = <3 13>;
            bindings = <&kp LBRC>;
            layers = <0 2 3>;
        };

        rbrc {
            key-positions = <6 16>;
            bindings = <&kp RBRC>;
            layers = <0 2 3>;
        };

        /* Convenience */

        del {
            key-positions = <4 14>;
            bindings = <&kp DEL>;
        };

        esc {
            key-positions = <5 15>;
            bindings = <&kp ESC>;
        };

        all {
            key-positions = <20 21>;
            bindings = <&kp ALL>;
            layers = <1>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp W           &kp C           &kp L        &kp D             &kp P        &kp K      &kp U             &kp O        &kp Y           &kp SINGLE_QUOTE
&mt LEFT_GUI R  &mt LEFT_ALT S  &mt LCTRL N  &mt LEFT_SHIFT T  &kp B        &kp J      &mt LEFT_SHIFT A  &mt LCTRL E  &mt LEFT_ALT I  &mt LEFT_GUI H
                &kp F           &kp M        &kp G                                     &kp X             &kp COMMA    &kp DOT
                                             &sl 1             &kp SPACE    &kp ENTER  &sl 2
            >;
        };

        nav_layer {
            bindings = <
&kp F1    &kp F2    &kp F3     &kp F4     &kp F5      &kp TOP  &kp ESC   &kp UARW   &kp TAB   &home
&kp LGUI  &kp LALT  &kp LSHFT  &kp LCTRL  &kp UNDO    &kp BTM  &kp LARW  &kp ENTER  &kp RARW  &end
          &kp CUT   &kp COPY   &kp PASTE                       &kp BSPC  &kp DARW   &kp DEL
                               &trans     &trans      &trans   &trans
            >;
        };

        sym_layer {
            bindings = <
&kp EXCL   &kp AT     &kp HASH   &kp DLLR   &kp PRCNT    &kp CARET  &kp AMPS   &kp SEMI   &kp COLON  &kp QMARK
&kp TILDE  &kp EQUAL  &kp MINUS  &kp FSLH   &kp GRAVE    &kp BSLH   &kp LCTRL  &kp LSHFT  &kp LALT   &kp LGUI
           &kp UNDER  &kp PLUS   &kp ASTRK                          &kp PIPE   &kp LT     &kp GT
                                 &trans     &trans       &trans     &trans
            >;
        };

        num_layer {
            bindings = <
&none   &none   &none   &none   &none     &none   &none   &none   &none   &none
&kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &soft_off
        &none   &none   &none                     &none   &none   &none
                        &trans  &trans    &trans  &trans
            >;
        };
    };
};
